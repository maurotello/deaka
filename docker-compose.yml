services:

  # 1. Base de Datos Geoespacial (PostgreSQL + PostGIS)
  db:
    image: postgis/postgis:16-3.4
    container_name: atlas_db
    restart: always
    environment:
      # Valores que ya tienes definidos en tu docker-compose actual
      POSTGRES_USER: user_dev
      POSTGRES_PASSWORD: password_dev
      POSTGRES_DB: directorio_local_db
    ports:
      # Mantenemos el puerto 5433 para evitar conflictos con instalaciones locales
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck: # Garantiza que la DB est칠 lista antes de que el Backend se conecte
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 2. Backend (Node.js/Express API - Carpeta 'server')
  backend:
    build:
      # Contexto: D칩nde encontrar el Dockerfile (el directorio 'proyecto')
      context: ./proyecto
      # Dockerfile: Usar치 el archivo que crearemos en 'proyecto/Dockerfile.backend'
      dockerfile: Dockerfile.backend
    container_name: atlas_backend
    restart: always
    ports:
      # Exponemos el puerto 3001, como est치 configurado en tu index.js
      - "3001:3001"
    volumes:
      # Montar el c칩digo para desarrollo:
      - ./proyecto:/app
      - /app/node_modules # Excluir node_modules de la copia para optimizar
    environment:
      # *** 춰CRUCIAL! Configuraci칩n de conexi칩n desde el contenedor ***
      # Usamos el nombre del servicio 'db' (no 'localhost' ni 127.0.0.1)
      DB_HOST: db
      DB_USER: user_dev
      DB_PASSWORD: password_dev
      DB_NAME: directorio_local_db
      DB_PORT: 5432 # El puerto INTERNO del contenedor DB
      # Puedes a침adir aqu칤 tu JWT_SECRET desde un .env o directamente
      # *** SECRETO DE AUTENTICACI칍N (CR칈TICO) ***
      JWT_SECRET: UNA_CLAVE_SECRETA_LARGA_PARA_DEV 
      # 游뚿 A칌ADIR ESTA NUEVA L칈NEA CON OTRA CLAVE LARGA
      JWT_REFRESH_SECRET: OTRA_CLAVE_SECRETA_LARGA_PARA_REFRESH
    # Esperar a que la DB pase el Healthcheck
    depends_on:
      db:
        condition: service_healthy 
    # Comando de inicio del servidor Express
    command: npm run dev:backend # Asumiendo que `dev:backend` est치 en `proyecto/package.json`

  # 3. Frontend (Next.js/React - Carpeta 'proyecto')
  frontend:
    build:
      # Contexto: D칩nde encontrar el Dockerfile (el directorio 'proyecto')
      context: ./proyecto
      # Dockerfile: Usar치 el archivo que crearemos en 'proyecto/Dockerfile.frontend'
      dockerfile: Dockerfile.frontend
    container_name: atlas_frontend
    ports:
      # Puerto por defecto de Next.js
      - "3000:3000" 
    volumes:
      # Montar el c칩digo para desarrollo (Next.js)
      - ./proyecto:/app
      - /app/node_modules
      - /app/.next # Excluir el cache de build de Next.js
    environment:
      NODE_ENV: development
      # El frontend no necesita la DB, pero podr칤a necesitar configurar ENV si usas SSR/SSG
    depends_on:
      - backend # El frontend depende del backend para las API
    command: npm run dev:frontend

volumes:
  postgres_data: